#! /bin/sh
#
# Copyright (c) 2014, 2015, 2016 Ingo Schwarze <schwarze@openbsd.org>
# Copyright (c) 2017, 2018 Kristaps Dzonsons <kristaps@bsd.lv>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

OCONFIGURE_VERSION="0.1.8"

#
# This script outputs two files: config.h and Makefile.configure.
# It tries to read from configure.local, which contains predefined
# values we won't autoconfigure.
#
# If you want to use configure with your project, have your GNUmakefile
# or BSDmakefile---whichever---try to import/include Makefile.configure
# at the beginning of the file.
#
# Like so (note no quotes, no period, etc.):
#
#   include Makefile.configure
#
# If it exists, configure was run; otherwise, it wasn't.
#
# You'll probably want to change parts of this file.  I've noted the
# parts that you'll probably change in the section documentation.
#
# See https://github.com/kristapsdz/oconfigure for more.

set -e

#----------------------------------------------------------------------
# Prepare for running: move aside previous configure runs.
# Output file descriptor usage:
#  1 (stdout): config.h or Makefile.configure
#  2 (stderr): original stderr, usually to the console
#  3: config.log
# You DO NOT want to change this.
#----------------------------------------------------------------------

[ -w config.log ] && mv config.log config.log.old
[ -w config.h   ] && mv config.h config.h.old

exec 3> config.log
echo "config.log: writing..."

#----------------------------------------------------------------------
# Initialize all variables here such that nothing can leak in from the
# environment except for CC and CFLAGS, which we might have passed in.
#----------------------------------------------------------------------

CC=`printf "all:\\n\\t@echo \\\$(CC)\\n" | make -sf -`
CFLAGS=`printf "all:\\n\\t@echo \\\$(CFLAGS)\\n" | make -sf -`
CFLAGS="${CFLAGS} -g -W -Wall -Wextra -Wmissing-prototypes -Wstrict-prototypes"
CFLAGS="${CFLAGS} -Wwrite-strings -Wno-unused-parameter"
LDADD=
CPPFLAGS=
LDFLAGS=
DESTDIR=
PREFIX="/usr/local"
BINDIR=
SBINDIR=
INCLUDEDIR=
LIBDIR=
MANDIR=
SHAREDIR=
INSTALL="install"
INSTALL_PROGRAM=
INSTALL_LIB=
INSTALL_MAN=
INSTALL_DATA=

#----------------------------------------------------------------------
# Allow certain variables to be overriden on the command line.
#----------------------------------------------------------------------

for keyvals in "$@"
do
	key=`echo $keyvals | cut -s -d '=' -f 1`
	if [ -z "$key" ]
	then
		echo "$0: invalid key-value: $keyvals" 1>&2
		exit 1
	fi
	val=`echo $keyvals | cut -d '=' -f 2-`
	case "$key" in
	LDADD)
		LDADD="$val" ;;
	LDFLAGS)
		LDFLAGS="$val" ;;
	CPPFLAGS)
		CPPFLAGS="$val" ;;
	DESTDIR)
		DESTDIR="$val" ;;
	PREFIX)
		PREFIX="$val" ;;
	MANDIR)
		MANDIR="$val" ;;
	LIBDIR)
		LIBDIR="$val" ;;
	BINDIR)
		BINDIR="$val" ;;
	SHAREDIR)
		SHAREDIR="$val" ;;
	SBINDIR)
		SBINDIR="$val" ;;
	INCLUDEDIR)
		INCLUDEDIR="$val" ;;
	*)
		echo "$0: invalid key: $key" 1>&2
		exit 1
	esac
done


#----------------------------------------------------------------------
# These are the values that will be pushed into config.h after we test
# for whether they're supported or not.
# Each of these must have a runtest(), below.
# Please sort by alpha, for clarity.
# You WANT to change this.
#----------------------------------------------------------------------

HAVE_ARC4RANDOM=
HAVE_B64_NTOP=
HAVE_CAPSICUM=
HAVE_ERR=
HAVE_EXPLICIT_BZERO=
HAVE_GETPROGNAME=
HAVE_INFTIM=
HAVE_MD5=
HAVE_MEMMEM=
HAVE_MEMRCHR=
HAVE_MEMSET_S=
HAVE_PATH_MAX=
HAVE_PLEDGE=
HAVE_PROGRAM_INVOCATION_SHORT_NAME=
HAVE_REALLOCARRAY=
HAVE_RECALLOCARRAY=
HAVE_SANDBOX_INIT=
HAVE_SECCOMP_FILTER=
HAVE_SOCK_NONBLOCK=
HAVE_STRLCAT=
HAVE_STRLCPY=
HAVE_STRNDUP=
HAVE_STRNLEN=
HAVE_STRTONUM=
HAVE_SYSTRACE=
HAVE_UNVEIL=
HAVE_ZLIB=
HAVE___PROGNAME=

#----------------------------------------------------------------------
# Allow configure.local to override all variables, default settings,
# command-line arguments, and tested features, above.
# You PROBABLY DO NOT want to change this.
#----------------------------------------------------------------------

if [ -r ./configure.local ]; then
	echo "configure.local: reading..." 1>&2
	echo "configure.local: reading..." 1>&3
	cat ./configure.local 1>&3
	. ./configure.local
else
	echo "configure.local: no (fully automatic configuration)" 1>&2
	echo "configure.local: no (fully automatic configuration)" 1>&3
fi

echo 1>&3

#----------------------------------------------------------------------
# Infrastructure for running tests.
# These consists of a series of functions that will attempt to run the
# given test file and record its exit into a HAVE_xxx variable.
# You DO NOT want to change this.
#----------------------------------------------------------------------

COMP="${CC} ${CFLAGS} ${CPPFLAGS} -Wno-unused -Werror"

# Check whether this HAVE_ setting is manually overridden.
# If yes, use the override, if no, do not decide anything yet.
# Arguments: lower-case test name, manual value

ismanual() {
	[ -z "${3}" ] && return 1
	echo "${1}: manual (HAVE_${2}=${3})" 1>&2
	echo "${1}: manual (HAVE_${2}=${3})" 1>&3
	echo 1>&3
	return 0
}

# Run a single autoconfiguration test.
# In case of success, enable the feature.
# In case of failure, do not decide anything yet.
# Arguments: lower-case test name, upper-case test name, additional
# CFLAGS, additional LIBS.

singletest() {
	extralib=""
	cat 1>&3 << __HEREDOC__
${1}: testing...
${COMP} -DTEST_${2} ${3} -o test-${1} tests.c ${4}
__HEREDOC__
	if ${COMP} -DTEST_${2} ${3} -o "test-${1}" tests.c ${4} 1>&3 2>&3; then
		echo "${1}: ${CC} succeeded" 1>&3
	else 
		if [ -n "${5}" ] ; then
			echo "${1}: ${CC} failed with $? (retrying)" 1>&3
			cat 1>&3 << __HEREDOC__
${1}: testing...
${COMP} -DTEST_${2} ${3} -o test-${1} tests.c ${5}
__HEREDOC__
			if ${COMP} -DTEST_${2} ${3} -o "test-${1}" tests.c ${5} 1>&3 2>&3; then
				echo "${1}: ${CC} succeeded" 1>&3
				extralib="(with ${5})"
			else 
				echo "${1}: ${CC} failed with $?" 1>&3
				echo 1>&3
				return 1
			fi
		else
			echo "${1}: ${CC} failed with $?" 1>&3
			echo 1>&3
			return 1
		fi
	fi

	echo "${1}: yes ${extralib}" 1>&2
	echo "${1}: yes ${extralib}" 1>&3
	echo 1>&3
	eval HAVE_${2}=1
	rm "test-${1}"
	return 0

	# Don't actually run the test: none of our tests check for
	# run-time behaviour.
	# if ./test-${1} 1>&3 2>&3; then
	# 	echo "${1}: yes" 1>&2
	# 	echo "${1}: yes" 1>&3
	# 	echo 1>&3
	# 	eval HAVE_${2}=1
	# 	rm "test-${1}"
	# 	return 0
	# else
	# 	echo "${1}: execution failed with $?" 1>&3
	# 	echo 1>&3
	# 	rm "test-${1}"
	# 	return 1
	# fi
}

# Run a complete autoconfiguration test, including the check for
# a manual override and disabling the feature on failure.
# Arguments: lower case name, upper case name, additional CFLAGS, 
# additional LDADD, alternative LDADD.

runtest() {
	eval _manual=\${HAVE_${2}}
	ismanual "${1}" "${2}" "${_manual}" && return 0
	singletest "${1}" "${2}" "${3}" "${4}" "${5}" && return 0
	echo "${1}: no" 1>&2
	eval HAVE_${2}=0
	return 1
}

#----------------------------------------------------------------------
# Begin running the tests themselves.
# All of your tests must be defined here.
# Please sort as the HAVE_xxxx values were defined.
# You WANT to change this.
# It consists of the following columns:
#    runtest
#    (1) test file
#    (2) macro to set
#    (3) argument to cc *before* -o
#    (4) argument to cc *after* 
#    (5) alternative argument to cc *after* 
#----------------------------------------------------------------------

runtest arc4random	ARC4RANDOM			  || true
runtest b64_ntop	B64_NTOP "" "" "-lresolv"	  || true
runtest capsicum	CAPSICUM			  || true
runtest err		ERR				  || true
runtest explicit_bzero	EXPLICIT_BZERO			  || true
runtest getprogname	GETPROGNAME			  || true
runtest INFTIM		INFTIM				  || true
runtest md5		MD5 "" "" "-lmd"		  || true
runtest memmem		MEMMEM			  	  || true
runtest memrchr		MEMRCHR			  	  || true
runtest memset_s	MEMSET_S			  || true
runtest PATH_MAX	PATH_MAX			  || true
runtest pledge		PLEDGE				  || true
runtest program_invocation_short_name	PROGRAM_INVOCATION_SHORT_NAME || true
runtest reallocarray	REALLOCARRAY			  || true
runtest recallocarray	RECALLOCARRAY			  || true
runtest sandbox_init	SANDBOX_INIT	"-Wno-deprecated" || true
runtest seccomp-filter	SECCOMP_FILTER			  || true
runtest SOCK_NONBLOCK	SOCK_NONBLOCK			  || true
runtest strlcat		STRLCAT				  || true
runtest strlcpy		STRLCPY				  || true
runtest strndup		STRNDUP				  || true
runtest strnlen		STRNLEN				  || true
runtest strtonum	STRTONUM			  || true
runtest sys_queue	SYS_QUEUE			  || true
runtest systrace	SYSTRACE			  || true
runtest unveil		UNVEIL				  || true
runtest zlib		ZLIB		"" "-lz"	  || true
runtest __progname	__PROGNAME			  || true

#----------------------------------------------------------------------
# Output writing: generate the config.h file.
# This file contains all of the HAVE_xxxx variables necessary for
# compiling your source.
# You must include "config.h" BEFORE any other variables.
# You WANT to change this.
#----------------------------------------------------------------------

exec > config.h

# Start with prologue.

cat << __HEREDOC__
#ifdef __cplusplus
#error "Do not use C++: this is a C application."
#endif
#if !defined(__GNUC__) || (__GNUC__ < 4)
#define __attribute__(x)
#endif
#if defined(__linux__) || defined(__MINT__)
#define _GNU_SOURCE	/* See test-*.c what needs this. */
#endif
#if !defined(__BEGIN_DECLS)
# define __BEGIN_DECLS
#endif
#if !defined(__END_DECLS)
# define __END_DECLS
#endif
__HEREDOC__

# For the function declaration variables...

[ ${HAVE_MD5} -eq 0 -o \
  ${HAVE_REALLOCARRAY} -eq 0 -o \
  ${HAVE_RECALLOCARRAY} -eq 0 -o \
  ${HAVE_STRLCAT} -eq 0 -o \
  ${HAVE_STRLCPY} -eq 0 -o \
  ${HAVE_STRNDUP} -eq 0 -o \
  ${HAVE_STRNLEN} -eq 0 ] \
	&& echo "#include <sys/types.h>"

[ ${HAVE_ERR} -eq 0 ] \
	&& echo "#include <stdarg.h>"

# Now we handle our HAVE_xxxx values.
# Most will just be defined as 0 or 1.

[ ${HAVE_PATH_MAX} -eq 0 ] \
	&& echo "#define PATH_MAX 4096"

[ ${HAVE_INFTIM} -eq 0 ] \
	&& echo "#define INFTIM (-1)"

cat << __HEREDOC__
#define HAVE_ARC4RANDOM ${HAVE_ARC4RANDOM}
#define HAVE_B64_NTOP ${HAVE_B64_NTOP}
#define HAVE_CAPSICUM ${HAVE_CAPSICUM}
#define HAVE_ERR ${HAVE_ERR}
#define HAVE_EXPLICIT_BZERO ${HAVE_EXPLICIT_BZERO}
#define HAVE_GETPROGNAME ${HAVE_GETPROGNAME}
#define HAVE_INFTIM ${HAVE_INFTIM}
#define HAVE_MD5 ${HAVE_MD5}
#define HAVE_MEMMEM ${HAVE_MEMMEM}
#define HAVE_MEMRCHR ${HAVE_MEMRCHR}
#define HAVE_MEMSET_S ${HAVE_MEMSET_S}
#define HAVE_PATH_MAX ${HAVE_PATH_MAX}
#define HAVE_PLEDGE ${HAVE_PLEDGE}
#define HAVE_PROGRAM_INVOCATION_SHORT_NAME ${HAVE_PROGRAM_INVOCATION_SHORT_NAME}
#define HAVE_REALLOCARRAY ${HAVE_REALLOCARRAY}
#define HAVE_RECALLOCARRAY ${HAVE_RECALLOCARRAY}
#define HAVE_SANDBOX_INIT ${HAVE_SANDBOX_INIT}
#define HAVE_SECCOMP_FILTER ${HAVE_SECCOMP_FILTER}
#define HAVE_SOCK_NONBLOCK ${HAVE_SOCK_NONBLOCK}
#define HAVE_STRLCAT ${HAVE_STRLCAT}
#define HAVE_STRLCPY ${HAVE_STRLCPY}
#define HAVE_STRNDUP ${HAVE_STRNDUP}
#define HAVE_STRNLEN ${HAVE_STRNLEN}
#define HAVE_STRTONUM ${HAVE_STRTONUM}
#define HAVE_SYS_QUEUE ${HAVE_SYS_QUEUE}
#define HAVE_SYSTRACE ${HAVE_SYSTRACE}
#define HAVE_UNVEIL ${HAVE_UNVEIL}
#define HAVE_ZLIB ${HAVE_ZLIB}
#define HAVE___PROGNAME ${HAVE___PROGNAME}
__HEREDOC__

# Now we do our function declarations for missing functions.

if [ ${HAVE_ERR} -eq 0 ]; then
	echo "extern void err(int, const char *, ...);"
	echo "extern void errx(int, const char *, ...);"
	echo "extern void warn(const char *, ...);"
	echo "extern void warnx(const char *, ...);"
	echo "extern void vwarn(const char *, va_list);"
	echo "extern void vwarnx(const char *, va_list);"
fi

if [ ${HAVE_MD5} -eq 0 ]; then
	echo "#define MD5_BLOCK_LENGTH 64"
	echo "#define MD5_DIGEST_LENGTH 16"
	echo "#define MD5_DIGEST_STRING_LENGTH (MD5_DIGEST_LENGTH * 2 + 1)"
	cat <<!!
typedef struct MD5Context {
	u_int32_t state[4];
	u_int64_t count;
	u_int8_t buffer[MD5_BLOCK_LENGTH];
} MD5_CTX;
!!
	echo "extern void MD5Init(MD5_CTX *);"
	echo "extern void MD5Update(MD5_CTX *, const u_int8_t *, size_t);"
	echo "extern void MD5Pad(MD5_CTX *);"
	echo "extern void MD5Transform(u_int32_t [4], const u_int8_t [MD5_BLOCK_LENGTH]);"
	echo "extern char *MD5End(MD5_CTX *, char *);"
	echo "extern void MD5Final(u_int8_t [MD5_DIGEST_LENGTH], MD5_CTX *);";
fi

if [ ${HAVE_SECCOMP_FILTER} -eq 1 ]; then
	arch=`uname -m 2>/dev/null || echo unknown`
	case "$arch" in
		x86_64)
			echo "#define SECCOMP_AUDIT_ARCH AUDIT_ARCH_X86_64"
			;;
		i*86)
			echo "#define SECCOMP_AUDIT_ARCH AUDIT_ARCH_I386"
			;;
		arm*)
			echo "#define SECCOMP_AUDIT_ARCH AUDIT_ARCH_ARM"
			;;
		aarch64)
			echo "#define SECCOMP_AUDIT_ARCH AUDIT_ARCH_AARCH64"
			;;
	esac
fi

if [ ${HAVE_B64_NTOP} -eq 0 ]; then
	echo "extern int b64_ntop(unsigned char const *, size_t, char *, size_t);";
	echo "extern int b64_pton(char const *, unsigned char *, size_t);"
fi

if [ ${HAVE_EXPLICIT_BZERO} -eq 0 ]; then
	echo "extern void explicit_bzero(void *, size_t);"
fi

if [ ${HAVE_MEMMEM} -eq 0 ]; then
	echo "void *memmem(const void *, size_t, const void *, size_t);"
fi

if [ ${HAVE_MEMRCHR} -eq 0 ]; then
	echo "void *memrchr(const void *b, int, size_t);"
fi

if [ ${HAVE_GETPROGNAME} -eq 0 ]; then
	echo "extern const char *getprogname(void);"
fi

if [ ${HAVE_REALLOCARRAY} -eq 0 ]; then
	echo "extern void *reallocarray(void *, size_t, size_t);"
fi

if [ ${HAVE_RECALLOCARRAY} -eq 0 ]; then
	echo "extern void *recallocarray(void *, size_t, size_t, size_t);"
fi

if [ ${HAVE_STRLCAT} -eq 0 ]; then
	echo "extern size_t strlcat(char *, const char *, size_t);"
fi

if [ ${HAVE_STRLCPY} -eq 0 ]; then
	echo "extern size_t strlcpy(char *, const char *, size_t);"
fi

if [ ${HAVE_STRNDUP} -eq 0 ]; then
	echo "extern char *strndup(const char *, size_t);"
fi

if [ ${HAVE_STRNLEN} -eq 0 ]; then
	echo "extern size_t strnlen(const char *, size_t);"
fi

if [ ${HAVE_STRTONUM} -eq 0 ]; then
	echo "extern long long strtonum(const char *, long long, long long, const char **);"
fi

if [ ${HAVE_SYS_QUEUE} -eq 0 ]; then
cat <<!!

/*	$OpenBSD$	*/
/*	$NetBSD: queue.h,v 1.11 1996/05/16 05:17:14 mycroft Exp $	*/

/*
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)queue.h	8.5 (Berkeley) 8/20/94
 */

/* OPENBSD ORIGINAL: sys/sys/queue.h */

#ifndef	_FAKE_QUEUE_H_
#define	_FAKE_QUEUE_H_

/*
 * Require for OS/X and other platforms that have old/broken/incomplete
 * <sys/queue.h>.
 */
#undef SLIST_HEAD
#undef SLIST_HEAD_INITIALIZER
#undef SLIST_ENTRY
#undef SLIST_FOREACH_PREVPTR
#undef SLIST_FOREACH_SAFE
#undef SLIST_FIRST
#undef SLIST_END
#undef SLIST_EMPTY
#undef SLIST_NEXT
#undef SLIST_FOREACH
#undef SLIST_INIT
#undef SLIST_INSERT_AFTER
#undef SLIST_INSERT_HEAD
#undef SLIST_REMOVE_HEAD
#undef SLIST_REMOVE_AFTER
#undef SLIST_REMOVE
#undef SLIST_REMOVE_NEXT
#undef LIST_HEAD
#undef LIST_HEAD_INITIALIZER
#undef LIST_ENTRY
#undef LIST_FIRST
#undef LIST_END
#undef LIST_EMPTY
#undef LIST_NEXT
#undef LIST_FOREACH
#undef LIST_FOREACH_SAFE
#undef LIST_INIT
#undef LIST_INSERT_AFTER
#undef LIST_INSERT_BEFORE
#undef LIST_INSERT_HEAD
#undef LIST_REMOVE
#undef LIST_REPLACE
#undef SIMPLEQ_HEAD
#undef SIMPLEQ_HEAD_INITIALIZER
#undef SIMPLEQ_ENTRY
#undef SIMPLEQ_FIRST
#undef SIMPLEQ_END
#undef SIMPLEQ_EMPTY
#undef SIMPLEQ_NEXT
#undef SIMPLEQ_FOREACH
#undef SIMPLEQ_INIT
#undef SIMPLEQ_INSERT_HEAD
#undef SIMPLEQ_INSERT_TAIL
#undef SIMPLEQ_INSERT_AFTER
#undef SIMPLEQ_REMOVE_HEAD
#undef TAILQ_HEAD
#undef TAILQ_HEAD_INITIALIZER
#undef TAILQ_ENTRY
#undef TAILQ_FIRST
#undef TAILQ_END
#undef TAILQ_NEXT
#undef TAILQ_LAST
#undef TAILQ_PREV
#undef TAILQ_EMPTY
#undef TAILQ_FOREACH
#undef TAILQ_FOREACH_REVERSE
#undef TAILQ_FOREACH_SAFE
#undef TAILQ_FOREACH_REVERSE_SAFE
#undef TAILQ_INIT
#undef TAILQ_INSERT_HEAD
#undef TAILQ_INSERT_TAIL
#undef TAILQ_INSERT_AFTER
#undef TAILQ_INSERT_BEFORE
#undef TAILQ_REMOVE
#undef TAILQ_REPLACE
#undef CIRCLEQ_HEAD
#undef CIRCLEQ_HEAD_INITIALIZER
#undef CIRCLEQ_ENTRY
#undef CIRCLEQ_FIRST
#undef CIRCLEQ_LAST
#undef CIRCLEQ_END
#undef CIRCLEQ_NEXT
#undef CIRCLEQ_PREV
#undef CIRCLEQ_EMPTY
#undef CIRCLEQ_FOREACH
#undef CIRCLEQ_FOREACH_REVERSE
#undef CIRCLEQ_INIT
#undef CIRCLEQ_INSERT_AFTER
#undef CIRCLEQ_INSERT_BEFORE
#undef CIRCLEQ_INSERT_HEAD
#undef CIRCLEQ_INSERT_TAIL
#undef CIRCLEQ_REMOVE
#undef CIRCLEQ_REPLACE

/*
 * This file defines five types of data structures: singly-linked lists, 
 * lists, simple queues, tail queues, and circular queues.
 *
 *
 * A singly-linked list is headed by a single forward pointer. The elements
 * are singly linked for minimum space and pointer manipulation overhead at
 * the expense of O(n) removal for arbitrary elements. New elements can be
 * added to the list after an existing element or at the head of the list.
 * Elements being removed from the head of the list should use the explicit
 * macro for this purpose for optimum efficiency. A singly-linked list may
 * only be traversed in the forward direction.  Singly-linked lists are ideal
 * for applications with large datasets and few or no removals or for
 * implementing a LIFO queue.
 *
 * A list is headed by a single forward pointer (or an array of forward
 * pointers for a hash table header). The elements are doubly linked
 * so that an arbitrary element can be removed without a need to
 * traverse the list. New elements can be added to the list before
 * or after an existing element or at the head of the list. A list
 * may only be traversed in the forward direction.
 *
 * A simple queue is headed by a pair of pointers, one the head of the
 * list and the other to the tail of the list. The elements are singly
 * linked to save space, so elements can only be removed from the
 * head of the list. New elements can be added to the list before or after
 * an existing element, at the head of the list, or at the end of the
 * list. A simple queue may only be traversed in the forward direction.
 *
 * A tail queue is headed by a pair of pointers, one to the head of the
 * list and the other to the tail of the list. The elements are doubly
 * linked so that an arbitrary element can be removed without a need to
 * traverse the list. New elements can be added to the list before or
 * after an existing element, at the head of the list, or at the end of
 * the list. A tail queue may be traversed in either direction.
 *
 * A circle queue is headed by a pair of pointers, one to the head of the
 * list and the other to the tail of the list. The elements are doubly
 * linked so that an arbitrary element can be removed without a need to
 * traverse the list. New elements can be added to the list before or after
 * an existing element, at the head of the list, or at the end of the list.
 * A circle queue may be traversed in either direction, but has a more
 * complex end of list detection.
 *
 * For details on the use of these macros, see the queue(3) manual page.
 */

#if defined(QUEUE_MACRO_DEBUG) || (defined(_KERNEL) && defined(DIAGNOSTIC))
#define _Q_INVALIDATE(a) (a) = ((void *)-1)
#else
#define _Q_INVALIDATE(a)
#endif

/*
 * Singly-linked List definitions.
 */
#define SLIST_HEAD(name, type)						\\
struct name {								\\
	struct type *slh_first;	/* first element */			\\
}
 
#define	SLIST_HEAD_INITIALIZER(head)					\\
	{ NULL }
 
#define SLIST_ENTRY(type)						\\
struct {								\\
	struct type *sle_next;	/* next element */			\\
}
 
/*
 * Singly-linked List access methods.
 */
#define	SLIST_FIRST(head)	((head)->slh_first)
#define	SLIST_END(head)		NULL
#define	SLIST_EMPTY(head)	(SLIST_FIRST(head) == SLIST_END(head))
#define	SLIST_NEXT(elm, field)	((elm)->field.sle_next)

#define	SLIST_FOREACH(var, head, field)					\\
	for((var) = SLIST_FIRST(head);					\\
	    (var) != SLIST_END(head);					\\
	    (var) = SLIST_NEXT(var, field))

#define	SLIST_FOREACH_SAFE(var, head, field, tvar)			\\
	for ((var) = SLIST_FIRST(head);				\\
	    (var) && ((tvar) = SLIST_NEXT(var, field), 1);		\\
	    (var) = (tvar))

/*
 * Singly-linked List functions.
 */
#define	SLIST_INIT(head) {						\\
	SLIST_FIRST(head) = SLIST_END(head);				\\
}

#define	SLIST_INSERT_AFTER(slistelm, elm, field) do {			\\
	(elm)->field.sle_next = (slistelm)->field.sle_next;		\\
	(slistelm)->field.sle_next = (elm);				\\
} while (0)

#define	SLIST_INSERT_HEAD(head, elm, field) do {			\\
	(elm)->field.sle_next = (head)->slh_first;			\\
	(head)->slh_first = (elm);					\\
} while (0)

#define	SLIST_REMOVE_AFTER(elm, field) do {				\\
	(elm)->field.sle_next = (elm)->field.sle_next->field.sle_next;	\\
} while (0)

#define	SLIST_REMOVE_HEAD(head, field) do {				\\
	(head)->slh_first = (head)->slh_first->field.sle_next;		\\
} while (0)

#define SLIST_REMOVE(head, elm, type, field) do {			\\
	if ((head)->slh_first == (elm)) {				\\
		SLIST_REMOVE_HEAD((head), field);			\\
	} else {							\\
		struct type *curelm = (head)->slh_first;		\\
									\\
		while (curelm->field.sle_next != (elm))			\\
			curelm = curelm->field.sle_next;		\\
		curelm->field.sle_next =				\\
		    curelm->field.sle_next->field.sle_next;		\\
		_Q_INVALIDATE((elm)->field.sle_next);			\\
	}								\\
} while (0)

/*
 * List definitions.
 */
#define LIST_HEAD(name, type)						\\
struct name {								\\
	struct type *lh_first;	/* first element */			\\
}

#define LIST_HEAD_INITIALIZER(head)					\\
	{ NULL }

#define LIST_ENTRY(type)						\\
struct {								\\
	struct type *le_next;	/* next element */			\\
	struct type **le_prev;	/* address of previous next element */	\\
}

/*
 * List access methods
 */
#define	LIST_FIRST(head)		((head)->lh_first)
#define	LIST_END(head)			NULL
#define	LIST_EMPTY(head)		(LIST_FIRST(head) == LIST_END(head))
#define	LIST_NEXT(elm, field)		((elm)->field.le_next)

#define LIST_FOREACH(var, head, field)					\\
	for((var) = LIST_FIRST(head);					\\
	    (var)!= LIST_END(head);					\\
	    (var) = LIST_NEXT(var, field))

#define	LIST_FOREACH_SAFE(var, head, field, tvar)			\\
	for ((var) = LIST_FIRST(head);				\\
	    (var) && ((tvar) = LIST_NEXT(var, field), 1);		\\
	    (var) = (tvar))

/*
 * List functions.
 */
#define	LIST_INIT(head) do {						\\
	LIST_FIRST(head) = LIST_END(head);				\\
} while (0)

#define LIST_INSERT_AFTER(listelm, elm, field) do {			\\
	if (((elm)->field.le_next = (listelm)->field.le_next) != NULL)	\\
		(listelm)->field.le_next->field.le_prev =		\\
		    &(elm)->field.le_next;				\\
	(listelm)->field.le_next = (elm);				\\
	(elm)->field.le_prev = &(listelm)->field.le_next;		\\
} while (0)

#define	LIST_INSERT_BEFORE(listelm, elm, field) do {			\\
	(elm)->field.le_prev = (listelm)->field.le_prev;		\\
	(elm)->field.le_next = (listelm);				\\
	*(listelm)->field.le_prev = (elm);				\\
	(listelm)->field.le_prev = &(elm)->field.le_next;		\\
} while (0)

#define LIST_INSERT_HEAD(head, elm, field) do {				\\
	if (((elm)->field.le_next = (head)->lh_first) != NULL)		\\
		(head)->lh_first->field.le_prev = &(elm)->field.le_next;\\
	(head)->lh_first = (elm);					\\
	(elm)->field.le_prev = &(head)->lh_first;			\\
} while (0)

#define LIST_REMOVE(elm, field) do {					\\
	if ((elm)->field.le_next != NULL)				\\
		(elm)->field.le_next->field.le_prev =			\\
		    (elm)->field.le_prev;				\\
	*(elm)->field.le_prev = (elm)->field.le_next;			\\
	_Q_INVALIDATE((elm)->field.le_prev);				\\
	_Q_INVALIDATE((elm)->field.le_next);				\\
} while (0)

#define LIST_REPLACE(elm, elm2, field) do {				\\
	if (((elm2)->field.le_next = (elm)->field.le_next) != NULL)	\\
		(elm2)->field.le_next->field.le_prev =			\\
		    &(elm2)->field.le_next;				\\
	(elm2)->field.le_prev = (elm)->field.le_prev;			\\
	*(elm2)->field.le_prev = (elm2);				\\
	_Q_INVALIDATE((elm)->field.le_prev);				\\
	_Q_INVALIDATE((elm)->field.le_next);				\\
} while (0)

/*
 * Simple queue definitions.
 */
#define SIMPLEQ_HEAD(name, type)					\\
struct name {								\\
	struct type *sqh_first;	/* first element */			\\
	struct type **sqh_last;	/* addr of last next element */		\\
}

#define SIMPLEQ_HEAD_INITIALIZER(head)					\\
	{ NULL, &(head).sqh_first }

#define SIMPLEQ_ENTRY(type)						\\
struct {								\\
	struct type *sqe_next;	/* next element */			\\
}

/*
 * Simple queue access methods.
 */
#define	SIMPLEQ_FIRST(head)	    ((head)->sqh_first)
#define	SIMPLEQ_END(head)	    NULL
#define	SIMPLEQ_EMPTY(head)	    (SIMPLEQ_FIRST(head) == SIMPLEQ_END(head))
#define	SIMPLEQ_NEXT(elm, field)    ((elm)->field.sqe_next)

#define SIMPLEQ_FOREACH(var, head, field)				\\
	for((var) = SIMPLEQ_FIRST(head);				\\
	    (var) != SIMPLEQ_END(head);					\\
	    (var) = SIMPLEQ_NEXT(var, field))

#define	SIMPLEQ_FOREACH_SAFE(var, head, field, tvar)			\\
	for ((var) = SIMPLEQ_FIRST(head);				\\
	    (var) && ((tvar) = SIMPLEQ_NEXT(var, field), 1);		\\
	    (var) = (tvar))

/*
 * Simple queue functions.
 */
#define	SIMPLEQ_INIT(head) do {						\\
	(head)->sqh_first = NULL;					\\
	(head)->sqh_last = &(head)->sqh_first;				\\
} while (0)

#define SIMPLEQ_INSERT_HEAD(head, elm, field) do {			\\
	if (((elm)->field.sqe_next = (head)->sqh_first) == NULL)	\\
		(head)->sqh_last = &(elm)->field.sqe_next;		\\
	(head)->sqh_first = (elm);					\\
} while (0)

#define SIMPLEQ_INSERT_TAIL(head, elm, field) do {			\\
	(elm)->field.sqe_next = NULL;					\\
	*(head)->sqh_last = (elm);					\\
	(head)->sqh_last = &(elm)->field.sqe_next;			\\
} while (0)

#define SIMPLEQ_INSERT_AFTER(head, listelm, elm, field) do {		\\
	if (((elm)->field.sqe_next = (listelm)->field.sqe_next) == NULL)\\
		(head)->sqh_last = &(elm)->field.sqe_next;		\\
	(listelm)->field.sqe_next = (elm);				\\
} while (0)

#define SIMPLEQ_REMOVE_HEAD(head, field) do {			\\
	if (((head)->sqh_first = (head)->sqh_first->field.sqe_next) == NULL) \\
		(head)->sqh_last = &(head)->sqh_first;			\\
} while (0)

#define SIMPLEQ_REMOVE_AFTER(head, elm, field) do {			\\
	if (((elm)->field.sqe_next = (elm)->field.sqe_next->field.sqe_next) \\
	    == NULL)							\\
		(head)->sqh_last = &(elm)->field.sqe_next;		\\
} while (0)

/*
 * Tail queue definitions.
 */
#define TAILQ_HEAD(name, type)						\\
struct name {								\\
	struct type *tqh_first;	/* first element */			\\
	struct type **tqh_last;	/* addr of last next element */		\\
}

#define TAILQ_HEAD_INITIALIZER(head)					\\
	{ NULL, &(head).tqh_first }

#define TAILQ_ENTRY(type)						\\
struct {								\\
	struct type *tqe_next;	/* next element */			\\
	struct type **tqe_prev;	/* address of previous next element */	\\
}

/* 
 * tail queue access methods 
 */
#define	TAILQ_FIRST(head)		((head)->tqh_first)
#define	TAILQ_END(head)			NULL
#define	TAILQ_NEXT(elm, field)		((elm)->field.tqe_next)
#define TAILQ_LAST(head, headname)					\\
	(*(((struct headname *)((head)->tqh_last))->tqh_last))
/* XXX */
#define TAILQ_PREV(elm, headname, field)				\\
	(*(((struct headname *)((elm)->field.tqe_prev))->tqh_last))
#define	TAILQ_EMPTY(head)						\\
	(TAILQ_FIRST(head) == TAILQ_END(head))

#define TAILQ_FOREACH(var, head, field)					\\
	for((var) = TAILQ_FIRST(head);					\\
	    (var) != TAILQ_END(head);					\\
	    (var) = TAILQ_NEXT(var, field))

#define	TAILQ_FOREACH_SAFE(var, head, field, tvar)			\\
	for ((var) = TAILQ_FIRST(head);					\\
	    (var) != TAILQ_END(head) &&					\\
	    ((tvar) = TAILQ_NEXT(var, field), 1);			\\
	    (var) = (tvar))


#define TAILQ_FOREACH_REVERSE(var, head, headname, field)		\\
	for((var) = TAILQ_LAST(head, headname);				\\
	    (var) != TAILQ_END(head);					\\
	    (var) = TAILQ_PREV(var, headname, field))

#define	TAILQ_FOREACH_REVERSE_SAFE(var, head, headname, field, tvar)	\\
	for ((var) = TAILQ_LAST(head, headname);			\\
	    (var) != TAILQ_END(head) &&					\\
	    ((tvar) = TAILQ_PREV(var, headname, field), 1);		\\
	    (var) = (tvar))

/*
 * Tail queue functions.
 */
#define	TAILQ_INIT(head) do {						\\
	(head)->tqh_first = NULL;					\\
	(head)->tqh_last = &(head)->tqh_first;				\\
} while (0)

#define TAILQ_INSERT_HEAD(head, elm, field) do {			\\
	if (((elm)->field.tqe_next = (head)->tqh_first) != NULL)	\\
		(head)->tqh_first->field.tqe_prev =			\\
		    &(elm)->field.tqe_next;				\\
	else								\\
		(head)->tqh_last = &(elm)->field.tqe_next;		\\
	(head)->tqh_first = (elm);					\\
	(elm)->field.tqe_prev = &(head)->tqh_first;			\\
} while (0)

#define TAILQ_INSERT_TAIL(head, elm, field) do {			\\
	(elm)->field.tqe_next = NULL;					\\
	(elm)->field.tqe_prev = (head)->tqh_last;			\\
	*(head)->tqh_last = (elm);					\\
	(head)->tqh_last = &(elm)->field.tqe_next;			\\
} while (0)

#define TAILQ_INSERT_AFTER(head, listelm, elm, field) do {		\\
	if (((elm)->field.tqe_next = (listelm)->field.tqe_next) != NULL)\\
		(elm)->field.tqe_next->field.tqe_prev =			\\
		    &(elm)->field.tqe_next;				\\
	else								\\
		(head)->tqh_last = &(elm)->field.tqe_next;		\\
	(listelm)->field.tqe_next = (elm);				\\
	(elm)->field.tqe_prev = &(listelm)->field.tqe_next;		\\
} while (0)

#define	TAILQ_INSERT_BEFORE(listelm, elm, field) do {			\\
	(elm)->field.tqe_prev = (listelm)->field.tqe_prev;		\\
	(elm)->field.tqe_next = (listelm);				\\
	*(listelm)->field.tqe_prev = (elm);				\\
	(listelm)->field.tqe_prev = &(elm)->field.tqe_next;		\\
} while (0)

#define TAILQ_REMOVE(head, elm, field) do {				\\
	if (((elm)->field.tqe_next) != NULL)				\\
		(elm)->field.tqe_next->field.tqe_prev =			\\
		    (elm)->field.tqe_prev;				\\
	else								\\
		(head)->tqh_last = (elm)->field.tqe_prev;		\\
	*(elm)->field.tqe_prev = (elm)->field.tqe_next;			\\
	_Q_INVALIDATE((elm)->field.tqe_prev);				\\
	_Q_INVALIDATE((elm)->field.tqe_next);				\\
} while (0)

#define TAILQ_REPLACE(head, elm, elm2, field) do {			\\
	if (((elm2)->field.tqe_next = (elm)->field.tqe_next) != NULL)	\\
		(elm2)->field.tqe_next->field.tqe_prev =		\\
		    &(elm2)->field.tqe_next;				\\
	else								\\
		(head)->tqh_last = &(elm2)->field.tqe_next;		\\
	(elm2)->field.tqe_prev = (elm)->field.tqe_prev;			\\
	*(elm2)->field.tqe_prev = (elm2);				\\
	_Q_INVALIDATE((elm)->field.tqe_prev);				\\
	_Q_INVALIDATE((elm)->field.tqe_next);				\\
} while (0)

/*
 * Circular queue definitions.
 */
#define CIRCLEQ_HEAD(name, type)					\\
struct name {								\\
	struct type *cqh_first;		/* first element */		\\
	struct type *cqh_last;		/* last element */		\\
}

#define CIRCLEQ_HEAD_INITIALIZER(head)					\\
	{ CIRCLEQ_END(&head), CIRCLEQ_END(&head) }

#define CIRCLEQ_ENTRY(type)						\\
struct {								\\
	struct type *cqe_next;		/* next element */		\\
	struct type *cqe_prev;		/* previous element */		\\
}

/*
 * Circular queue access methods 
 */
#define	CIRCLEQ_FIRST(head)		((head)->cqh_first)
#define	CIRCLEQ_LAST(head)		((head)->cqh_last)
#define	CIRCLEQ_END(head)		((void *)(head))
#define	CIRCLEQ_NEXT(elm, field)	((elm)->field.cqe_next)
#define	CIRCLEQ_PREV(elm, field)	((elm)->field.cqe_prev)
#define	CIRCLEQ_EMPTY(head)						\\
	(CIRCLEQ_FIRST(head) == CIRCLEQ_END(head))

#define CIRCLEQ_FOREACH(var, head, field)				\\
	for((var) = CIRCLEQ_FIRST(head);				\\
	    (var) != CIRCLEQ_END(head);					\\
	    (var) = CIRCLEQ_NEXT(var, field))

#define	CIRCLEQ_FOREACH_SAFE(var, head, field, tvar)			\\
	for ((var) = CIRCLEQ_FIRST(head);				\\
	    (var) != CIRCLEQ_END(head) &&				\\
	    ((tvar) = CIRCLEQ_NEXT(var, field), 1);			\\
	    (var) = (tvar))

#define CIRCLEQ_FOREACH_REVERSE(var, head, field)			\\
	for((var) = CIRCLEQ_LAST(head);					\\
	    (var) != CIRCLEQ_END(head);					\\
	    (var) = CIRCLEQ_PREV(var, field))

#define	CIRCLEQ_FOREACH_REVERSE_SAFE(var, head, headname, field, tvar)	\\
	for ((var) = CIRCLEQ_LAST(head, headname);			\\
	    (var) != CIRCLEQ_END(head) && 				\\
	    ((tvar) = CIRCLEQ_PREV(var, headname, field), 1);		\\
	    (var) = (tvar))

/*
 * Circular queue functions.
 */
#define	CIRCLEQ_INIT(head) do {						\\
	(head)->cqh_first = CIRCLEQ_END(head);				\\
	(head)->cqh_last = CIRCLEQ_END(head);				\\
} while (0)

#define CIRCLEQ_INSERT_AFTER(head, listelm, elm, field) do {		\\
	(elm)->field.cqe_next = (listelm)->field.cqe_next;		\\
	(elm)->field.cqe_prev = (listelm);				\\
	if ((listelm)->field.cqe_next == CIRCLEQ_END(head))		\\
		(head)->cqh_last = (elm);				\\
	else								\\
		(listelm)->field.cqe_next->field.cqe_prev = (elm);	\\
	(listelm)->field.cqe_next = (elm);				\\
} while (0)

#define CIRCLEQ_INSERT_BEFORE(head, listelm, elm, field) do {		\\
	(elm)->field.cqe_next = (listelm);				\\
	(elm)->field.cqe_prev = (listelm)->field.cqe_prev;		\\
	if ((listelm)->field.cqe_prev == CIRCLEQ_END(head))		\\
		(head)->cqh_first = (elm);				\\
	else								\\
		(listelm)->field.cqe_prev->field.cqe_next = (elm);	\\
	(listelm)->field.cqe_prev = (elm);				\\
} while (0)

#define CIRCLEQ_INSERT_HEAD(head, elm, field) do {			\\
	(elm)->field.cqe_next = (head)->cqh_first;			\\
	(elm)->field.cqe_prev = CIRCLEQ_END(head);			\\
	if ((head)->cqh_last == CIRCLEQ_END(head))			\\
		(head)->cqh_last = (elm);				\\
	else								\\
		(head)->cqh_first->field.cqe_prev = (elm);		\\
	(head)->cqh_first = (elm);					\\
} while (0)

#define CIRCLEQ_INSERT_TAIL(head, elm, field) do {			\\
	(elm)->field.cqe_next = CIRCLEQ_END(head);			\\
	(elm)->field.cqe_prev = (head)->cqh_last;			\\
	if ((head)->cqh_first == CIRCLEQ_END(head))			\\
		(head)->cqh_first = (elm);				\\
	else								\\
		(head)->cqh_last->field.cqe_next = (elm);		\\
	(head)->cqh_last = (elm);					\\
} while (0)

#define	CIRCLEQ_REMOVE(head, elm, field) do {				\\
	if ((elm)->field.cqe_next == CIRCLEQ_END(head))			\\
		(head)->cqh_last = (elm)->field.cqe_prev;		\\
	else								\\
		(elm)->field.cqe_next->field.cqe_prev =			\\
		    (elm)->field.cqe_prev;				\\
	if ((elm)->field.cqe_prev == CIRCLEQ_END(head))			\\
		(head)->cqh_first = (elm)->field.cqe_next;		\\
	else								\\
		(elm)->field.cqe_prev->field.cqe_next =			\\
		    (elm)->field.cqe_next;				\\
	_Q_INVALIDATE((elm)->field.cqe_prev);				\\
	_Q_INVALIDATE((elm)->field.cqe_next);				\\
} while (0)

#define CIRCLEQ_REPLACE(head, elm, elm2, field) do {			\\
	if (((elm2)->field.cqe_next = (elm)->field.cqe_next) ==		\\
	    CIRCLEQ_END(head))						\\
		(head).cqh_last = (elm2);				\\
	else								\\
		(elm2)->field.cqe_next->field.cqe_prev = (elm2);	\\
	if (((elm2)->field.cqe_prev = (elm)->field.cqe_prev) ==		\\
	    CIRCLEQ_END(head))						\\
		(head).cqh_first = (elm2);				\\
	else								\\
		(elm2)->field.cqe_prev->field.cqe_next = (elm2);	\\
	_Q_INVALIDATE((elm)->field.cqe_prev);				\\
	_Q_INVALIDATE((elm)->field.cqe_next);				\\
} while (0)
#endif	/* !_FAKE_QUEUE_H_ */

!!
fi

echo "config.h: written" 1>&2
echo "config.h: written" 1>&3

#----------------------------------------------------------------------
# Now we go to generate our Makefile.configure.
# This file is simply a bunch of Makefile variables.
# They'll work in both GNUmakefile and BSDmakefile.
# You MIGHT want to change this.
#----------------------------------------------------------------------

exec > Makefile.configure

[ -z "${BINDIR}"     ] && BINDIR="${PREFIX}/bin"
[ -z "${SBINDIR}"    ] && SBINDIR="${PREFIX}/sbin"
[ -z "${INCLUDEDIR}" ] && INCLUDEDIR="${PREFIX}/include"
[ -z "${LIBDIR}"     ] && LIBDIR="${PREFIX}/lib"
[ -z "${MANDIR}"     ] && MANDIR="${PREFIX}/man"
[ -z "${SHAREDIR}"   ] && SHAREDIR="${PREFIX}/share"

[ -z "${INSTALL_PROGRAM}" ] && INSTALL_PROGRAM="${INSTALL} -m 0555"
[ -z "${INSTALL_LIB}"     ] && INSTALL_LIB="${INSTALL} -m 0444"
[ -z "${INSTALL_MAN}"     ] && INSTALL_MAN="${INSTALL} -m 0444"
[ -z "${INSTALL_DATA}"    ] && INSTALL_DATA="${INSTALL} -m 0444"

cat << __HEREDOC__
CC		= ${CC}
CFLAGS		= ${CFLAGS}
CPPFLAGS	= ${CPPFLAGS}
LDADD		= ${LDADD}
LDFLAGS		= ${LDFLAGS}
STATIC		= ${STATIC}
PREFIX		= ${PREFIX}
BINDIR		= ${BINDIR}
SHAREDIR	= ${SHAREDIR}
SBINDIR		= ${SBINDIR}
INCLUDEDIR	= ${INCLUDEDIR}
LIBDIR		= ${LIBDIR}
MANDIR		= ${MANDIR}
INSTALL		= ${INSTALL}
INSTALL_PROGRAM	= ${INSTALL_PROGRAM}
INSTALL_LIB	= ${INSTALL_LIB}
INSTALL_MAN	= ${INSTALL_MAN}
INSTALL_DATA	= ${INSTALL_DATA}
__HEREDOC__

echo "Makefile.configure: written" 1>&2
echo "Makefile.configure: written" 1>&3

exit 0
