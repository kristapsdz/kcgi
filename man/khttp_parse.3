.\"	$Id$
.\"
.\" Copyright (c) 2014--2016 Kristaps Dzonsons <kristaps@bsd.lv>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: October 10 2016 $
.Dt KHTTP_PARSE 3
.Os
.Sh NAME
.Nm khttp_parse ,
.Nm khttp_parsex
.Nd parse a CGI instance for kcgi
.Sh LIBRARY
.Lb libkcgi
.Sh SYNOPSIS
.In stdarg.h
.In stdint.h
.In unistd.h
.In kcgi.h
.Ft "enum kcgi_err"
.Fo khttp_parse
.Fa "struct kreq *req"
.Fa "const struct kvalid *keys"
.Fa "size_t keysz"
.Fa "const char *const *pages"
.Fa "size_t pagesz"
.Fa "size_t defpage"
.Fc
.Ft "enum kcgi_err"
.Fo khttp_parsex
.Fa "struct kreq *req"
.Fa "const struct kmimemap *suffixes"
.Fa "const char *const *mimes"
.Fa "size_t mimesz"
.Fa "const struct kvalid *keys"
.Fa "size_t keysz"
.Fa "const char *const *pages"
.Fa "size_t pagesz"
.Fa "size_t defmime"
.Fa "size_t defpage"
.Fa "void *arg"
.Fa "void (*argfree)(void *arg)"
.Fa "unsigned int debugging"
.Fa "const struct kopts *opts"
.Fc
.Vt extern const char *const kmimetypes[KMIME__MAX];
.Vt extern const char *const khttps[KHTTP__MAX];
.Vt extern const char *const kschemes[KSCHEME__MAX];
.Vt extern const char *const kresps[KRESP__MAX];
.Vt extern const char *const kmethods[KMETHOD__MAX];
.Vt extern const struct kmimemap ksuffixmap[];
.Vt extern const char *const ksuffixes[KMIME__MAX];
.Sh DESCRIPTION
The
.Nm khttp_parse
and
.Nm khttp_parsex
functions parse and validate input and the HTTP environment
(compression, paths, MIME types, and so on).
They are the central functions in the
.Xr kcgi 3
library, parsing and validating key-value form (query string, message
body, cookie) data and opaque message bodies.
They must be matched by
.Xr khttp_free 3
if and only if the return value is
.Dv KERR_OK
.Pq otherwise, resources are internally freed .
.Pp
The collective arguments are as follows:
.Bl -tag -width Ds
.It Fa arg
A pointer to private application data.
It is not touched unless
.Fa argfree
is provided.
.It Fa argfree
Function invoked with
.Fa arg
by the child process starting to parse untrusted network data.  This
makes sure that no unnecessary data is leaked into the child.
.It Fa debugging
This bit-field sets debugging of the underlying parse and/or write
routines.
Debugging messages are sent to
.Dv stderr
and consist of the process ID, a colon, then the logged data.
Logged data consists of printable ASCII characters and spaces.
A newline will flush the existing line.
There are at most
.Dv BUFSIZ
characters per line.
Other characters are either escaped (\ev, \er, \eb) or replaced with a
question mark.
If the
.Li KREQ_DEBUG_WRITE
bit is set, write operations directly or indirectly via
.Xr khttp_write 3
will be logged.
When the request is torn down with
.Xr khttp_free 3 ,
the process ID and total logged bytes are printed on their own line.
If the
.Li KREQ_DEBUG_READ_BODY
bit is set, the entire input body is logged.
The total byte count is printed on its own line afterward.
.It Fa defmime
If no MIME type is specified (that is, there's no suffix to the
page request), use this index in the
.Fa mimes
array.
.It Fa defpage
If no page was specified (e.g., the default landing page), this is
provided as the requested page index.
.It Fa keys
An array of input and validation fields.
.It Fa keysz
The number of elements in
.Fa keys .
.It Fa mimesz
The number of elements in
.Fa mimes .
Also the MIME index used if no MIME type was matched.
This differs from
.Fa defmime ,
which is used if there is no MIME suffix at all.
.It Fa mimes
An array of MIME types (e.g.,
.Dq text/html ) ,
mapped into a MIME index during MIME body parsing.
This relates both to pages and input fields with a body type.
.It Fa opts
Tunable options regarding socket buffer sizes and so on.
If set to
.Dv NULL ,
meaningful defaults are used.
.It Fa pages
An array of recognised pathnames.
When pathnames are parsed, they're matched to indices in this array.
.It Fa pagesz
The number of pages in
.Fa pages .
Also used if the requested page was not in
.Fa pages .
.It Fa req
Fill with input fields and HTTP context parsed from the CGI environment.
This is the main structure carried around in a
.Xr kcgi 3
application.
.It Fa suffixes
Define the MIME type (suffix) mapping.
.El
.Pp
The first form,
.Nm khttp_parse ,
is for applications using the system-recognised MIME types.
This should work well enough for most applications.
It is equivalent to invoking the second form,
.Nm khttp_parsex ,
as follows:
.Bd -literal -offset indent
khttp_parsex(req, ksuffixmap,
  kmimetypes, KMIME__MAX, keys, keysz,
  pages, pagesz, KMIME_TEXT_HTML,
  defpage, NULL, NULL, 0, NULL);
.Ed
.Ss Types
A
.Vt "struct kreq"
object is filled in by
.Nm khttp_parse
and
.Nm khttp_parsex .
It consists of the following fields:
.Bl -tag -width Ds
.It Va arg
Private application data.
This is set during
.Fn khttp_parse .
.It Va auth
Type of
.Qq managed
HTTP authorisation, if any.
This is digest
.Pq Dv KAUTH_DIGEST
or basic
.Pq Dv KAUTH_BASIC
authorisation performed by the web server.
See the
.Va rawauth
field for raw authorisation requests.
If a managed authorisation is specified but with unknown type (i.e., not
digest or basic authentiation), this is set to
.Dv KAUTH_UNKNOWN .
.It Va cookies
All key-value pairs read from user cookies.
.It Va cookiemap
Entries in successfully-parsed (or un-parsed)
.Va cookies
mapped into field indices as defined by the
.Fa keys
argument to
.Fn khttp_parse .
.It Va cookienmap
Entries in unsuccessfully-parsed (but still attempted)
.Fa cookies
mapped into field indices as defined by the
.Fa keys
argument to
.Fn khttp_parse .
.It Va cookiesz
The size of the
.Va cookies
array.
.It Va fields
All key-value pairs read from the requests (query string, cookies,
message body).
.It Va fieldmap
Entries in successfully-parsed (or un-parsed)
.Fa fields
mapped into field indices as defined by the
.Fa keys
arguments to
.Fn khttp_parse .
.It Va fieldnmap
Entries in unsuccessfully-parsed (but still attempted)
.Fa fields
mapped into field indices as defined by the
.Fa keys
argument to
.Fn khttp_parse .
.It Va fieldsz
The number of elements in the
.Va fields
array.
.It Va fullpath
The full path following the server name or
an empty string
if there is no path following the server.
For example, if
.Pa foo.cgi/bar/baz
is the
.Dv PATH_INFO ,
this would be
.Pa /bar/baz .
.It Va host
The host-name (i.e., the host of the web application) request passed to
the application.
This shouldn't be confused with the application host's canonical name.
.It Va method
The
.Dv KMETHOD_ACL ,
.Dv KMETHOD_CONNECT ,
.Dv KMETHOD_COPY ,
.Dv KMETHOD_DELETE ,
.Dv KMETHOD_GET ,
.Dv KMETHOD_HEAD ,
.Dv KMETHOD_LOCK ,
.Dv KMETHOD_MKCALENDAR ,
.Dv KMETHOD_MKCOL ,
.Dv KMETHOD_MOVE ,
.Dv KMETHOD_OPTIONS ,
.Dv KMETHOD_POST ,
.Dv KMETHOD_PROPFIND ,
.Dv KMETHOD_PROPPATCH ,
.Dv KMETHOD_PUT ,
.Dv KMETHOD_REPORT ,
.Dv KMETHOD_TRACE ,
or
.Dv KMETHOD_UNLOCK
submission method.
If the method was not understand,
.Dv KMETHOD__MAX
is used.
If no method was used, the default is
.Dv KMETHOD_GET .
.Pp
.Em Note :
applications will usually accept only
.Dv KMETHOD_GET
and
.Dv KMETHOD_POST ,
so be sure to emit a
.Dv KHTTP_405
status for non-conforming methods.
.It Va kdata
Internal data.
Should not be touched.
.It Va keys
Value passed to
.Fn khttp_parse .
.It Va keysz
Value passed to
.Fn khttp_parse .
.It Va mime
The MIME type of the requested file as determined by its
.Pa suffix
matched to the
.Fa mimemap
map passed to
.Fn khttp_parsex
or the default
.Va kmimemap
if using
.Fn khttp_parse .
This defaults to the
.Va mimesz
value passed to
.Fn khttp_parsex
or the default
.Dv KMIME__MAX
if using
.Fn khttp_parse
when no suffix is specified or when the suffix is specified but not known.
.It Va page
The page index as defined by the
.Va pages
array passed to
.Fn khttp_parse
and parsed from the requested file.
This is the
.Em first
path component!
The default page provided to
.Fn khttp_parse
is used if no path was specified or
.Fa pagesz
if the path failed lookup.
.It Va pagename
The string corresponding to
.Va page .
.It Va port
The server's receiving TCP port.
.It Va path
The path (or empty string) following the parsed component regardless of
whether it was located in the path array provided to
.Fn khttp_parse .
For example, if the
.Dv PATH_INFO
is
.Pa foo.cgi/bar/baz.html ,
the path component would be
.Pa baz
.Pq with the leading slash stripped .
.It Va pname
The script name (which may be an empty string in degenerate cases)
passed to the server.
This may not reflect a file-system entity if re-written by the web
server.
.It Va rawauth
If the web server passes the
.Qq Authorization
header (which, for example, Apache doesn't by default), then the header
is parsed into this field, which is of type
.Vt struct khttpauth .
.It Va remote
The string form of the client's IPV4 or IVP6 address.
.It Va reqmap
Mapping of
.Vt "enum krequ"
enumeration values to
.Va reqs
parsed from the input stream.
.It Va reqs
List of all HTTP request headers, known via
.Vt "enum krequ"
and not known, parsed from the input stream.
.It Va reqsz
Number of request headers in
.Va reqs .
.It Va scheme
The access scheme, which is either
.Dv KSCHEME_HTTP
or
.Dv KSCHEME_HTTPS .
The scheme defaults to
.Dv KSCHEME_HTTP
if not specified by the request.
.It Va suffix
The suffix part of the
.Dv PATH_INFO
or
an empty string
if none exists.
For example, if the
.Dv PATH_INFO
is
.Pa foo.cgi/bar/baz.html ,
the suffix would be
.Pa html .
See the
.Va mime
field for the MIME type parsed from the suffix.
.El
.Pp
The application may optionally define
.Vt keys
provided to
.Nm khttp_parse
and
.Nm khttp_parsex
as an array of
.Vt "struct kvalid" .
This structure is central to the validation of input data.
It consists of the following fields:
.Bl -tag -width Ds
.It Va name
The field name, i.e., how it appears in the HTML form input name.
This cannot be
.Dv NULL .
If the field name is an empty string and the HTTP message consists of an
opaque body (and not key-value pairs), then that field will be used to
validate the HTTP message body.
This is useful for
.Dv KMETHOD_PUT
style requests.
.It Va valid
Validating function.
This function accepts a single
.Ft "struct kpair *"
argument and returns an
.Ft int
where zero is failure and non-zero is parse success.
If the function is
.Dv NULL ,
then no validation is performed and the data is considered as valid and
is bucketed into
.Va fieldmap
as such.
If you provide your own
.Fa valid
function, it usually sets the
.Va type
and
.Va parsed
variables in the key-value pair.
However, if you're working with binary or alternatively-typed data, you
can set the
.Va type
to
.Dv KPAIR__MAX ,
ignore the
.Va parsed field, and work directly with
.Va val
and
.Va valsz .
You can also allocate new memory for the
.Va val
and thus
.Va valsz :
if the value of
.Va val
changes during your validation, the new value will be freed with
.Xr free 3
after being passed out of the sandbox.
.Em Note :
these functions are invoked from within a system-specific sandbox.
You should assume that you cannot invoke any
.Qq invasive
system calls such as opening files, sockets, etc.
In other words, these must be pure computation.
.El
.Pp
The
.Vt "struct kpair"
structure presents the user with fields parsed from input and (possibly)
matched to the
.Fa keys
variable passed to
.Nm khttp_parse
and
.Nm khttp_parsex .
It is also passed to the validation function to be filled in.
In this case, the MIME-related fields are already filled in and may be
examined to determine the method of validation.
This is useful when validating opaque message bodies.
.Bl -tag -width Ds
.It Va ctype
The value's MIME content type (e.g.,
.Li image/jpeg ) ,
or
an empty string
if not defined.
.It Va ctypepos
If
.Va ctype
is not
.Dv NULL ,
it is looked up in the
.Fa mimes
parameter passed to
.Nm khttp_parsex
or
.Va ksuffixmap
if using
.Nm khttp_parse .
If found, it is set to the appropriate index.
Otherwise, it's
.Fa mimesz .
.It Va file
The value's MIME source filename or
an empty string
if not defined.
.It Va key
The nil-terminated key (input) name.
If the HTTP message body is opaque (e.g.,
.Dv KMETHOD_PUT ) ,
then an empty-string key is cooked up.
.It Va keypos
If looked up in the
.Fa keys
variable passed to
.Nm khttp_parse ,
the index of the looked-up key.
Otherwise
.Fa keysz .
.It Va next
In a cookie or field map,
.Fa next
points to the next parsed key-value pair with the same
.Fa key
name.
This occurs most often in HTML checkbox forms, where many fields may
have the same name.
.It Va parsed
The parsed, validated value.
These may be integer, for a 64-bit signed integer; string, for a
nil-termianted character string; or double, for a double-precision
floating-point number.
This is intentionally basic because the resulting data must be reliably
passed from the parsing context back into the web application.
.It Va state
The validation state: whether validated by a parse, invalidated by a
parse, or non-validated (unparsed).
.It Va type
If parsed, the type of data in
.Fa parsed ,
otherwise
.Dv KFIELD__MAX .
.It Va val
The (input) value, which is always nil-terminated, but if the data is
binary, nil terminators may occur before the true data length of
.Fa valsz .
.It Va valsz
The true length of
.Fa val .
.It Va xcode
The value's MIME content transfer encoding (e.g.,
.Li base64 ) ,
or
an empty string
if not defined.
.El
.Pp
The
.Vt struct khttpauth
structure holds authorisation data if passed by the server.
If no data was passed by the server, the
.Va type
value is
.Dv KAUTH_NONE .
Otherwise it's
.Dv KAUTH_BASIC
or
.Dv KAUTH_DIGEST ,
with
.Dv KAUTH_UNKNOWN
if the authorisation type was not recognised.
The specific fields are as follows.
.Bl -tag -width Ds
.It Va authorised
For
.Dv KAUTH_BASIC
or
.Dv KAUTH_DIGEST
authorisation, this field indicates whether all required values were
specified.
.It Va d
A union containing parsed fields per type:
.Va basic
for
.Dv KAUTH_BASIC
or
.Va digest
for
.Dv KAUTH_DIGEST .
.El
.Pp
If the field for an HTTP authorisation request is
.Dv KAUTH_BASIC ,
it will consist of the following for its parsed entities in its
.Vt struct khttpbasic
structure:
.Bl -tag -width Ds
.It Va response
The hashed and encoded response string.
.El
.Pp
If the field for an HTTP authorisation request is
.Dv KAUTH_DIGEST ,
it will consist of the following in its
.Vt struct khttpdigest
structure:
.Bl -tag -width Ds
.It Va alg
The encoding algorithm, parsed from the possible
.Li MD5
or
.Li MD5-Sess
values.
.It Va qop
The quality of protection algorithm, which may be unspecified,
.Li Auth
or
.Li Auth-Init .
.It Va user
The user coordinating the request.
.It Va uri
The URI for which the request is designated.
.Pq This must match the request URI .
.It Va realm
The request realm.
.It Va nonce
The server-generated nonce value.
.It Va cnonce
The (optional) client-generated nonce value.
.It Va response
The hashed and encoded response string, which entangled fields depending
on algorithm and quality of protection.
.It Va count
The (optional)
.Va cnonce
counter.
.It Va opaque
The (optional) opaque string requested by the server.
.El
.Pp
The
.Vt struct kopts
structure consists of tunables for network performance.
You probably don't want to use these unless you really know what you're
doing!
.Bl -tag -width Ds
.It Va sndbufsz
The size of the output buffer.
The output buffer is a heap-allocated region into which writes (via
.Xr khttp_write 3
and
.Xr khttp_head 3 )
are buffered instead of being flushed directly to the wire.
The buffer is flushed when it is full, when
the HTTP headers are flushed, and when
.Xr khttp_free 3
is invoked.
If the buffer size is zero, writes are flushed immediately to the wire.
If the buffer size is less than zero, it is filled with a meaningful
default.
.El
.Pp
Lastly, the
.Vt struct khead
structure holds parsed HTTP headers.
.Bl -tag -width Ds
.It Va key
Holds the HTTP header name.
This is not the CGI header name (e.g.,
.Li HTTP_COOKIE ) ,
but the reconstituted HTTP name (e.g.,
.Li Coookie ) .
.It Va val
The opaque header value, which may be an empty string.
.El
.Ss Variables
A number of variables are defined
.In kcgi.h
to simplify invocations of the
.Nm khttp_parse
family.
Applications are strongly suggested to use these variables (and
associated enumerations) in
.Nm khttp_parse
instead of overriding them with hand-rolled sets in
.Nm khttp_parsex .
.Bl -tag -width Ds
.It Va kmimetypes
Indexed list of common MIME types, for example,
.Dq text/html
and
.Dq application/json .
Corresponds to
.Vt enum kmime
.Vt enum khttp .
.It Va khttps
Indexed list of HTTP status code and identifier, for example,
.Dq 200 OK .
Corresponds to
.Vt enum khttp .
.It Va kschemes
Indexed list of URL schemes, for example,
.Dq https
or
.Dq ftp .
Corresponds to
.Vt enum kscheme .
.It Va kresps
Indexed list of header response names, for example,
.Dq Cache-Control
or
.Dq Content-Length .
Corresponds to
.Vt enum kresp .
.It Va kmethods
Indexed list of HTTP methods, for example,
.Dq GET
and
.Dq POST .
Corresponds to
.Vt enum kmethod .
.It Va ksuffixmap
Map of MIME types defined in
.Vt enum kmime
to possible suffixes.
This array is terminated with a MIME type of
.Dv KMIME__MAX
and name
.Dv NULL .
.It Va ksuffixes
Indexed list of canonical suffixes for MIME types corresponding to
.Vt enum kmime .
.Em Note :
this may be a
.Dv NULL
pointer for types that have no canonical suffix, for example.
.Dq application/octet-stream .
.El
.Sh RETURN VALUES
.Nm khttp_parse
and
.Nm khttp_parsex
return an error code:
.Bl -tag -width -Ds
.It Dv KCGI_OK
Success (not an error).
.It Dv KCGI_ENOMEM
Memory failure.
This can occur in many places: spawning a child, allocating memory,
creating sockets, etc.
.It Dv KCGI_ENFILE
Could not allocate file descriptors.
.It Dv KCGI_EAGAIN
Could not spawn a child.
.It Dv KCGI_FORM
Malformed data between parent and child whilst parsing an HTTP request.
(Internal system error.)
.It Dv KCGI_SYSTEM
Opaque operating system error.
.El
.Pp
On failure, the calling application should terminate as soon as possible.
Applications should
.Em not
try to write an HTTP 505 error or similar, but allow the web server to
handle the empty CGI response on its own.
.Sh SEE ALSO
.Xr kcgi 3 ,
.Xr khttp_free 3
.Sh AUTHORS
The
.Nm khttp_parse
and
.Nm khttp_parsex
functions were written by
.An Kristaps Dzonsons Aq Mt kristaps@bsd.lv .
