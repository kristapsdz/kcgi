.\"	$Id$
.\"
.\" Copyright (c) 2015, 2016 Kristaps Dzonsons <kristaps@bsd.lv>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: April 14 2016 $
.Dt KHTTP_FCGI_INIT 3
.Os
.Sh NAME
.Nm khttp_fcgi_init ,
.Nm khttp_fcgi_initx
.Nd initialise a FastCGI context for kcgi
.Sh LIBRARY
.Lb libkcgi
.Sh SYNOPSIS
.In stdarg.h
.In stdint.h
.In unistd.h
.In kcgi.h
.Ft "enum kcgi_err"
.Fo khttp_fcgi_init
.Fa "struct kfcgi **fcgi"
.Fa "const struct kvalid *keys"
.Fa "size_t keysz"
.Fa "const char *const *pages"
.Fa "size_t pagesz"
.Fa "size_t defpage"
.Fc
.Ft "enum kcgi_err"
.Fo khttp_fcgi_initx
.Fa "struct kreq **fcgi"
.Fa "const char *const *mimes"
.Fa "size_t mimemax"
.Fa "const struct kvalid *keys"
.Fa "size_t keysz"
.Fa "const struct kmimemap *mimemap"
.Fa "size_t defmime"
.Fa "const char *const *pages"
.Fa "size_t pagesz"
.Fa "size_t defpage"
.Fa "void *arg"
.Fa "void (*argfree)(void *arg)"
.Fa "unsigned int debugging"
.Fa "const struct kopts *opts"
.Fc
.Sh DESCRIPTION
The
.Nm khttp_fcgi_init
and
.Nm khttp_fcgi_initx
functions initialise a FastCGI context for
.Xr kcgi 3 .
These functions will only work if invoked as FastCGI servers, for
example,
.Xr kfcgi 8 .
They should be called as early as possible in the life-span of a FastCGI
application, preferably directly after initialisation.
.Pp
The collective arguments are defined in
.Xr khttp_parse 3 .
.Em Function arguments are not copied :
all pointers are passed by reference and used in later invocations of
.Xr khttp_fcgi_parse 3 .
.Pp
The first form,
.Nm khttp_fgci_init ,
is for applications using the system-recognised MIME types.
This should work well enough for most applications.
It is equivalent to invoking the second form,
.Nm khttp_fcgi_initx ,
as follows:
.Bd -literal -offset indent
khttp_fcgi_initx(fcgi, kmimetypes, KMIME__MAX,
  keys, keysz, ksuffixmap, KMIME_TEXT_HTML,
  pages, pagesz, defpage, NULL, NULL, 0, NULL);
.Ed
.Pp
After invocation with a return value of
.Dv KCGI_OK ,
the
.Fa fcgi
pointer is filled in (and must be later be freed with
.Xr khttp_fcgi_free 3 )
and the
.Xr khttp_fcgi_parse 3
and
.Xr khttp_fcgi_parsex 3
functions may be invoked.
.Pp
.Em Note :
in accordance with the FastCGI specification,
.Nm khttp_fcgi_init
and
.Nm khttp_fcgi_initx
will install signal handlers for
.Dv SIGTERM .
These should not be changed by the calling application, but are not
prohibited from doing so.
The consequences are that a server wishing to halt the application must
use
.Dv SIGKILL
instead of the FastCGI-specified
.Dv SIGTERM
and suffer the consequences of not properly exiting the parse loop.
.Sh RETURN VALUES
.Nm khttp_fcgi_init
and
.Nm khttp_fcgi_initx
return an error code:
.Bl -tag -width -Ds
.It Dv KCGI_OK
Success (not an error).
.It Dv KCGI_ENOMEM
Memory failure.
This can occur in many places: spawning a child, allocating memory,
creating sockets, etc.
.It Dv KCGI_ENFILE
Could not allocate file descriptors.
.It Dv KCGI_EAGAIN
Could not spawn a child.
.It Dv KCGI_SYSTEM
Opaque operating system error.
.It Dv KCGI_HUP
Hangup: the function was not invoked in a FastCGI context.
.El
.Pp
On failure, the calling application should terminate as soon as
possible.
.Sh SEE ALSO
.Xr kcgi 3 ,
.Xr khttp_fcgi_free 3 ,
.Xr khttp_fcgi_parse 3 ,
.Xr khttp_parse 3
.Sh AUTHORS
The
.Nm khttp_fcgi_init
and
.Nm khttp_fcgi_initx
functions were written by
.An Kristaps Dzonsons Aq Mt kristaps@bsd.lv .
